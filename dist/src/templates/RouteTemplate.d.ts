export declare const RouteTemplate = "\n/**\n * Defines {name} based API routes.\n */\nexport const {name} = (router) => {\n    router.get('/', async (req, res, next) => {\n        try {\n            // Get Many {name}\n        } catch (error) {\n            next(error)\n        }\n    });\n    \n    router.get('/:id', async (req, res, next) => {\n        try {\n         // Get One {name}\n        } catch (error) {\n            next(error)\n        }\n    });\n    \n    router.post('/', async (req, res, next) => {\n        try {\n         // Create One {name}\n        } catch (error) {\n            next(error)\n        }\n    });\n    \n    router.put('/:id', async (req, res, next) => {\n        try {\n         // Update One {name}\n        } catch (error) {\n            next(error)\n        }\n    });\n    \n    router.patch('/:id', async (req, res, next) => {\n        try {\n         // Update partial {name}\n        } catch (error) {\n            next(error)\n        }\n    });\n    \n    router.delete('/:id', async (req, res, next) => {\n        try {\n         // Destroy One {name}\n        } catch (error) {\n            next(error)\n        }\n    });\n        \n    return router;\n};";
export declare const TSRouteTemplate = "import { type Router, type Request, type Response, type NextFunction } from \"express\";\nimport { type RouteFunction, type RouteOptions } from \"clapi-bb/dist/types\";\n\n\n/**\n * Defines {name} based API routes.\n */\nexport const {name}: RouteFunction = (router: Router): Router => {\n    router.get('/', async (options: RouteOptions) => {\n        try {\n            // Get Many {name}\n        } catch (error) {\n            options.next(error)\n        }\n    });\n    \n    router.get('/:id', async (options: RouteOptions) => {\n        try {\n         // Get One {name}\n        } catch (error) {\n            options.next(error)\n        }\n    });\n    \n    router.post('/', async (options: RouteOptions) => {\n        try {\n         // Create One {name}\n        } catch (error) {\n            options.next(error)\n        }\n    });\n    \n    router.put('/:id', async (options: RouteOptions) => {\n        try {\n         // Update One {name}\n        } catch (error) {\n            options.next(error)\n        }\n    });\n    \n    router.patch('/:id', async (options: RouteOptions) => {\n        try {\n         // Update partial {name}\n        } catch (error) {\n            options.next(error)\n        }\n    });\n    \n    router.delete('/:id', async (options: RouteOptions) => {\n        try {\n         // Destroy One {name}\n        } catch (error) {\n            options.next(error)\n        }\n    });\n        \n    return router;\n};";
