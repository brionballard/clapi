export declare const ServerTemplate = "import dotenv from 'dotenv';\ndotenv.config();\n\nimport express from 'express';\nimport cors from 'cors';\n// import { httpErrorHandler } from './httpErrorHandling';\n// import { apiRoutes } from '../../transport/http/routes';\n\nconst app: Express = express();\napp.use(cors());\napp.use(express.json({ limit: '15mb' }));\n\nconst PORT = process.env.APP_PORT ?? {defaultPort};\n\nif (PORT === undefined) {\n  throw new Error('APP_PORT cannot be undefined!');\n}\n\n// apiRoutes.map((apiRoute) => {\n//   return app.use(apiRoute.endpoint, apiRoute.routes(apiRoute.router));\n// });\n\nconst {name} = app.listen(PORT, () => {\n  console.log(`\u26A1Server is running here \uD83D\uDC49 http://localhost:${PORT}`);\n});\n\n// app.use(httpErrorHandler);\n\n{name}.timeout = 30000;\n\nexport {\n  {name},\n  app\n};\n";
export declare const TSServerTemplate = "import dotenv from 'dotenv';\ndotenv.config();\n\nimport express, { type Express } from 'express';\nimport cors from 'cors';\nimport { type IncomingMessage, type Server, type ServerResponse } from 'http';\n\n// import { type RouteFunction, type RouteOptions } from \"clapi-bb/dist/types\";\n// import { httpErrorHandler } from './httpErrorHandling';\n// import { apiRoutes } from '../../transport/http/routes';\n\nconst app: Express = express();\napp.use(cors());\napp.use(express.json({ limit: '2gb' }));\n\nconst PORT = process.env.APP_PORT ?? {defaultPort};\n\nif (PORT === undefined) {\n  throw new Error('APP_PORT must be set');\n}\n\n// loop through your routes or use app.use()\n// apiRoutes.map((apiRoute: RouteObject) => {\n//   return app.use(apiRoute.endpoint, apiRoute.routes(apiRoute.router));\n// });\n\nconst server: Server<typeof IncomingMessage, typeof ServerResponse> = app.listen(PORT, () => {\n  console.log(`\u26A1Server is running here \uD83D\uDC49 http://localhost:${PORT}`);\n});\n\n// Handle HTTP errors\n// app.use(httpErrorHandler);\n\nserver.timeout = 30000;\n\nexport {\n  server,\n  app\n};\n";
